{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lunafalatar/QM2/blob/main/notebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rh0t7NbNOgk5"
      },
      "source": [
        "# Intro to Pandas\n",
        "\n",
        "## *Workshop 2*  [![Open In Colab](https://github.com/oballinger/QM2/blob/main/colab-badge.png?raw=1)](https://colab.research.google.com/github/oballinger/QM2/blob/main/notebooks/W02.%20Pandas.ipynb)\n",
        "\n",
        "\n",
        "In this workshop, our aim is to get used to working with more complex data that we've imported from external files. We'll start to graph it, and to slice and dice it, to select the bits we're interested in.\n",
        "\n",
        "We will work with *pandas* to manipulate the data, and to derive measures and graphs that tell us a bit more than what the source data files tell us.\n",
        "\n",
        "### Aims\n",
        "\n",
        "- Learn to import data to python using pandas\n",
        "- Learn how access specific rows, columns and cells\n",
        "- Plot the data\n",
        "- Tidy up graphs to include axes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5wnaRCMaOgk6"
      },
      "source": [
        "## Introduction\n",
        "\n",
        "We are going to work with some UK income data. The income data is packaged as a .csv file. The Pandas package knows how to handle this and put the data in a DataFrame, as we've seen. Let's examine the data and start to see what we can say about it. First of all, we have to find data - I'm interested in looking in data with a wide spread, so I looked for data on income in the UK.\n",
        "\n",
        "This data is collected by the Office for National Statistics(ONS) : http://www.ons.gov.uk/ons/datasets-and-tables/index.html?pageSize=50&sortBy=none&sortDirection=none&newquery=income+percentile - but the exact data I want to see, income by percentile, is tricky to find.\n",
        "\n",
        "I ended up using data from 2011, generated from a study called the Family Resources Survey and collated and tweaked by an independent research unit called the Institute of Fiscal Studies (IFS). The \"tweaking\" they do tends to be around the size of the family unit, and other factors which create economies of scale - hence they \"equivalise\" it. The IFS is quoted in UK Government documents, so we can have some trust in their impartiality, or at least accuracy - of course, if we were publishing research about this, that's not really good enough and we'd want to reproduce, or at least understand and critique, their methodology rather than just trusting it!\n",
        "\n",
        "e.g.:\n",
        "\n",
        "http://www.ifs.org.uk/wheredoyoufitin/about.php\n",
        "\n",
        "https://en.wikipedia.org/wiki/Equivalisation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MsF6sfaWOgk7"
      },
      "source": [
        "## Downloading the Data\n",
        "\n",
        "Let's grab our income data from our course website and save it into our data folder.  If you've not already created a data folder then do so using the following command.  Don't worry if it generates an error, that means you've already got a data folder.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cWXVYQmlOgk7"
      },
      "outputs": [],
      "source": [
        "!mkdir data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cSISKOHUOglB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2483053f-7c83-4cc4-f4d7-5ab52a95c8e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
            "                                 Dload  Upload   Total   Spent    Left  Speed\n",
            "100 15154  100 15154    0     0  19106      0 --:--:-- --:--:-- --:--:-- 19109\n"
          ]
        }
      ],
      "source": [
        "!mkdir data/wk2\n",
        "!curl https://s3.eu-west-2.amazonaws.com/qm2/wk2/incomes.csv -o ./data/wk2/incomes.csv"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-bsU0xgcOglF"
      },
      "source": [
        "      "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5cBMkYbaOglG"
      },
      "outputs": [],
      "source": [
        "import pandas\n",
        "import pylab\n",
        "import matplotlib.pyplot as plt\n",
        "# make the plots a little wider by default\n",
        "%matplotlib inline\n",
        "plt.style.use('ggplot')\n",
        "\n",
        "pylab.rcParams['figure.figsize'] = (10., 8.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GD2qMhAxOglK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367
        },
        "outputId": "c322730a-4102-4639-d29d-aca06f5fed38"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Net equivalised household income in 2010-11, week  \\\n",
              "Percentile Point                                                      \n",
              "1                                                             33.50   \n",
              "2                                                             98.60   \n",
              "3                                                            128.56   \n",
              "4                                                            151.05   \n",
              "5                                                            166.32   \n",
              "\n",
              "                 Childless couple, annual income  \\\n",
              "Percentile Point                                   \n",
              "1                                       1,746.92   \n",
              "2                                       5,141.01   \n",
              "3                                       6,703.11   \n",
              "4                                       7,875.75   \n",
              "5                                       8,671.91   \n",
              "\n",
              "                 Couple, two children under 14  \\\n",
              "Percentile Point                                 \n",
              "1                                     2,445.69   \n",
              "2                                     7,197.41   \n",
              "3                                     9,384.36   \n",
              "4                                    11,026.05   \n",
              "5                                    12,140.68   \n",
              "\n",
              "                 Couple, three children under 14  \\\n",
              "Percentile Point                                   \n",
              "1                                       2,795.08   \n",
              "2                                       8,225.61   \n",
              "3                                      10,724.98   \n",
              "4                                      12,601.20   \n",
              "5                                      13,875.06   \n",
              "\n",
              "                 Couple with one child under 14  \\\n",
              "Percentile Point                                  \n",
              "1                                      2,096.31   \n",
              "2                                      6,169.21   \n",
              "3                                      8,043.74   \n",
              "4                                      9,450.90   \n",
              "5                                     10,406.30   \n",
              "\n",
              "                 Couple with two children aged 15 to 18  \\\n",
              "Percentile Point                                          \n",
              "1                                              2,899.89   \n",
              "2                                              8,534.07   \n",
              "3                                             11,127.17   \n",
              "4                                             13,073.75   \n",
              "5                                             14,395.38   \n",
              "\n",
              "                 Couple, two children under 14 plus dependent adult  \\\n",
              "Percentile Point                                                      \n",
              "1                                                          3,022.18   \n",
              "2                                                          8,893.95   \n",
              "3                                                         11,596.39   \n",
              "4                                                         13,625.05   \n",
              "5                                                         15,002.41   \n",
              "\n",
              "                 Single adult Lone parent, one child under 14  \\\n",
              "Percentile Point                                                \n",
              "1                    1,170.44                        1,519.82   \n",
              "2                    3,444.48                        4,472.68   \n",
              "3                    4,491.09                        5,831.71   \n",
              "4                    5,276.75                        6,851.90   \n",
              "5                    5,810.18                        7,544.57   \n",
              "\n",
              "                 Lone parent, two children under 14  \\\n",
              "Percentile Point                                      \n",
              "1                                          1,869.21   \n",
              "2                                          5,500.88   \n",
              "3                                          7,172.33   \n",
              "4                                          8,427.05   \n",
              "5                                          9,278.95   \n",
              "\n",
              "                 Lone parent, two children aged 15-18 ANNOTATIONS  \\\n",
              "Percentile Point                                                    \n",
              "1                                            2,323.41         NaN   \n",
              "2                                            6,837.54         NaN   \n",
              "3                                            8,915.14         NaN   \n",
              "4                                           10,474.75         NaN   \n",
              "5                                           11,533.65         NaN   \n",
              "\n",
              "                 1979 to 1996-97 1996-97 to 2009-10 1996-97 to 2010-11  \n",
              "Percentile Point                                                        \n",
              "1                            NaN                NaN                NaN  \n",
              "2                         -0.20%             -1.30%             -0.50%  \n",
              "3                          0.40%              0.10%              0.10%  \n",
              "4                          0.50%              0.80%              0.60%  \n",
              "5                          0.70%              1.00%              0.90%  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9d0e0bcf-d105-4de0-b849-0b16885a8ebc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Net equivalised household income in 2010-11, week</th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <th>Couple, two children under 14</th>\n",
              "      <th>Couple, three children under 14</th>\n",
              "      <th>Couple with one child under 14</th>\n",
              "      <th>Couple with two children aged 15 to 18</th>\n",
              "      <th>Couple, two children under 14 plus dependent adult</th>\n",
              "      <th>Single adult</th>\n",
              "      <th>Lone parent, one child under 14</th>\n",
              "      <th>Lone parent, two children under 14</th>\n",
              "      <th>Lone parent, two children aged 15-18</th>\n",
              "      <th>ANNOTATIONS</th>\n",
              "      <th>1979 to 1996-97</th>\n",
              "      <th>1996-97 to 2009-10</th>\n",
              "      <th>1996-97 to 2010-11</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>33.50</td>\n",
              "      <td>1,746.92</td>\n",
              "      <td>2,445.69</td>\n",
              "      <td>2,795.08</td>\n",
              "      <td>2,096.31</td>\n",
              "      <td>2,899.89</td>\n",
              "      <td>3,022.18</td>\n",
              "      <td>1,170.44</td>\n",
              "      <td>1,519.82</td>\n",
              "      <td>1,869.21</td>\n",
              "      <td>2,323.41</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>98.60</td>\n",
              "      <td>5,141.01</td>\n",
              "      <td>7,197.41</td>\n",
              "      <td>8,225.61</td>\n",
              "      <td>6,169.21</td>\n",
              "      <td>8,534.07</td>\n",
              "      <td>8,893.95</td>\n",
              "      <td>3,444.48</td>\n",
              "      <td>4,472.68</td>\n",
              "      <td>5,500.88</td>\n",
              "      <td>6,837.54</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.20%</td>\n",
              "      <td>-1.30%</td>\n",
              "      <td>-0.50%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>128.56</td>\n",
              "      <td>6,703.11</td>\n",
              "      <td>9,384.36</td>\n",
              "      <td>10,724.98</td>\n",
              "      <td>8,043.74</td>\n",
              "      <td>11,127.17</td>\n",
              "      <td>11,596.39</td>\n",
              "      <td>4,491.09</td>\n",
              "      <td>5,831.71</td>\n",
              "      <td>7,172.33</td>\n",
              "      <td>8,915.14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.40%</td>\n",
              "      <td>0.10%</td>\n",
              "      <td>0.10%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>151.05</td>\n",
              "      <td>7,875.75</td>\n",
              "      <td>11,026.05</td>\n",
              "      <td>12,601.20</td>\n",
              "      <td>9,450.90</td>\n",
              "      <td>13,073.75</td>\n",
              "      <td>13,625.05</td>\n",
              "      <td>5,276.75</td>\n",
              "      <td>6,851.90</td>\n",
              "      <td>8,427.05</td>\n",
              "      <td>10,474.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.50%</td>\n",
              "      <td>0.80%</td>\n",
              "      <td>0.60%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>166.32</td>\n",
              "      <td>8,671.91</td>\n",
              "      <td>12,140.68</td>\n",
              "      <td>13,875.06</td>\n",
              "      <td>10,406.30</td>\n",
              "      <td>14,395.38</td>\n",
              "      <td>15,002.41</td>\n",
              "      <td>5,810.18</td>\n",
              "      <td>7,544.57</td>\n",
              "      <td>9,278.95</td>\n",
              "      <td>11,533.65</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.70%</td>\n",
              "      <td>1.00%</td>\n",
              "      <td>0.90%</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d0e0bcf-d105-4de0-b849-0b16885a8ebc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9d0e0bcf-d105-4de0-b849-0b16885a8ebc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9d0e0bcf-d105-4de0-b849-0b16885a8ebc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7d588303-448b-413a-92e0-1f08a9f6dec0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d588303-448b-413a-92e0-1f08a9f6dec0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7d588303-448b-413a-92e0-1f08a9f6dec0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "income",
              "summary": "{\n  \"name\": \"income\",\n  \"rows\": 99,\n  \"fields\": [\n    {\n      \"column\": \"Percentile Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          63,\n          41,\n          96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Net equivalised household income in 2010-11, week\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 306.2042511502242,\n        \"min\": 33.5,\n        \"max\": 2090.35,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          499.78,\n          371.11,\n          1174.48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Childless couple, annual income\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"26,058.46\",\n          \"19,349.72\",\n          \"61,237.18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple, two children under 14\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"36,481.84\",\n          \"27,089.61\",\n          \"85,732.05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple, three children under 14\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"41,693.53\",\n          \"30,959.56\",\n          \"97,979.49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple with one child under 14\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"31,270.15\",\n          \"23,219.67\",\n          \"73,484.61\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple with two children aged 15 to 18\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"43,257.04\",\n          \"32,120.54\",\n          \"101,653.72\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple, two children under 14 plus dependent adult\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"45,081.13\",\n          \"33,475.02\",\n          \"105,940.32\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Single adult\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"17,459.17\",\n          \"12,964.31\",\n          \"41,028.91\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lone parent, one child under 14\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"22,670.86\",\n          \"16,834.26\",\n          \"53,276.35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lone parent, two children under 14\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"27,882.55\",\n          \"20,704.20\",\n          \"65,523.78\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lone parent, two children aged 15-18\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"34,657.75\",\n          \"25,735.13\",\n          \"81,445.45\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ANNOTATIONS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Poverty line\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1979 to 1996-97\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"1.20%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1996-97 to 2009-10\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"2.20%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1996-97 to 2010-11\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"1.30%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "data_path = \"./data/wk2/incomes.csv\"\n",
        "\n",
        "income =  pandas.read_csv(data_path, index_col=0)\n",
        "income.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nwBN9m9BOglN"
      },
      "source": [
        "This is a simple dataframe - we see the percentile and an income. Note that I've told pandas to use the first column (the Percentile) as the index to make life easier.\n",
        "\n",
        "The percentile tells us how people on that income rank - so the final category, 99% (which is really binned, so 99%<n$\\leq$ 100%), is telling us how much \"the 1%\" earn. Let's find out:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SqAN20onOglN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367
        },
        "outputId": "233532f9-4d24-4222-ef00-4545537884dc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Net equivalised household income in 2010-11, week  \\\n",
              "Percentile Point                                                      \n",
              "95                                                          1075.73   \n",
              "96                                                          1174.48   \n",
              "97                                                          1302.74   \n",
              "98                                                          1523.31   \n",
              "99                                                          2090.35   \n",
              "\n",
              "                 Childless couple, annual income  \\\n",
              "Percentile Point                                   \n",
              "95                                     56,088.56   \n",
              "96                                     61,237.18   \n",
              "97                                     67,925.07   \n",
              "98                                     79,425.23   \n",
              "99                                    108,990.74   \n",
              "\n",
              "                 Couple, two children under 14  \\\n",
              "Percentile Point                                 \n",
              "95                                   78,523.99   \n",
              "96                                   85,732.05   \n",
              "97                                   95,095.10   \n",
              "98                                  111,195.32   \n",
              "99                                  152,587.04   \n",
              "\n",
              "                 Couple, three children under 14  \\\n",
              "Percentile Point                                   \n",
              "95                                     89,741.70   \n",
              "96                                     97,979.49   \n",
              "97                                    108,680.12   \n",
              "98                                    127,080.36   \n",
              "99                                    174,385.19   \n",
              "\n",
              "                 Couple with one child under 14  \\\n",
              "Percentile Point                                  \n",
              "95                                    67,306.27   \n",
              "96                                    73,484.61   \n",
              "97                                    81,510.09   \n",
              "98                                    95,310.27   \n",
              "99                                   130,788.89   \n",
              "\n",
              "                 Couple with two children aged 15 to 18  \\\n",
              "Percentile Point                                          \n",
              "95                                            93,107.01   \n",
              "96                                           101,653.72   \n",
              "97                                           112,755.62   \n",
              "98                                           131,845.88   \n",
              "99                                           180,924.64   \n",
              "\n",
              "                 Couple, two children under 14 plus dependent adult  \\\n",
              "Percentile Point                                                      \n",
              "95                                                        97,033.21   \n",
              "96                                                       105,940.32   \n",
              "97                                                       117,510.37   \n",
              "98                                                       137,405.64   \n",
              "99                                                       188,553.99   \n",
              "\n",
              "                 Single adult Lone parent, one child under 14  \\\n",
              "Percentile Point                                                \n",
              "95                  37,579.34                       48,797.05   \n",
              "96                  41,028.91                       53,276.35   \n",
              "97                  45,509.80                       59,094.81   \n",
              "98                  53,214.90                       69,099.95   \n",
              "99                  73,023.80                       94,821.95   \n",
              "\n",
              "                 Lone parent, two children under 14  \\\n",
              "Percentile Point                                      \n",
              "95                                        60,014.76   \n",
              "96                                        65,523.78   \n",
              "97                                        72,679.83   \n",
              "98                                        84,984.99   \n",
              "99                                       116,620.10   \n",
              "\n",
              "                 Lone parent, two children aged 15-18 ANNOTATIONS  \\\n",
              "Percentile Point                                                    \n",
              "95                                          74,597.79         NaN   \n",
              "96                                          81,445.45         NaN   \n",
              "97                                          90,340.35         NaN   \n",
              "98                                         105,635.55         NaN   \n",
              "99                                         144,957.69         NaN   \n",
              "\n",
              "                 1979 to 1996-97 1996-97 to 2009-10 1996-97 to 2010-11  \n",
              "Percentile Point                                                        \n",
              "95                         2.90%              2.00%              1.30%  \n",
              "96                         3.00%              2.00%              1.40%  \n",
              "97                         3.20%              2.20%              1.60%  \n",
              "98                         3.20%              2.70%              1.70%  \n",
              "99                           NaN                NaN                NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4209b15-edc9-4499-9a88-9cf699834524\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Net equivalised household income in 2010-11, week</th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <th>Couple, two children under 14</th>\n",
              "      <th>Couple, three children under 14</th>\n",
              "      <th>Couple with one child under 14</th>\n",
              "      <th>Couple with two children aged 15 to 18</th>\n",
              "      <th>Couple, two children under 14 plus dependent adult</th>\n",
              "      <th>Single adult</th>\n",
              "      <th>Lone parent, one child under 14</th>\n",
              "      <th>Lone parent, two children under 14</th>\n",
              "      <th>Lone parent, two children aged 15-18</th>\n",
              "      <th>ANNOTATIONS</th>\n",
              "      <th>1979 to 1996-97</th>\n",
              "      <th>1996-97 to 2009-10</th>\n",
              "      <th>1996-97 to 2010-11</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1075.73</td>\n",
              "      <td>56,088.56</td>\n",
              "      <td>78,523.99</td>\n",
              "      <td>89,741.70</td>\n",
              "      <td>67,306.27</td>\n",
              "      <td>93,107.01</td>\n",
              "      <td>97,033.21</td>\n",
              "      <td>37,579.34</td>\n",
              "      <td>48,797.05</td>\n",
              "      <td>60,014.76</td>\n",
              "      <td>74,597.79</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.90%</td>\n",
              "      <td>2.00%</td>\n",
              "      <td>1.30%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>1174.48</td>\n",
              "      <td>61,237.18</td>\n",
              "      <td>85,732.05</td>\n",
              "      <td>97,979.49</td>\n",
              "      <td>73,484.61</td>\n",
              "      <td>101,653.72</td>\n",
              "      <td>105,940.32</td>\n",
              "      <td>41,028.91</td>\n",
              "      <td>53,276.35</td>\n",
              "      <td>65,523.78</td>\n",
              "      <td>81,445.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.00%</td>\n",
              "      <td>2.00%</td>\n",
              "      <td>1.40%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1302.74</td>\n",
              "      <td>67,925.07</td>\n",
              "      <td>95,095.10</td>\n",
              "      <td>108,680.12</td>\n",
              "      <td>81,510.09</td>\n",
              "      <td>112,755.62</td>\n",
              "      <td>117,510.37</td>\n",
              "      <td>45,509.80</td>\n",
              "      <td>59,094.81</td>\n",
              "      <td>72,679.83</td>\n",
              "      <td>90,340.35</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.20%</td>\n",
              "      <td>2.20%</td>\n",
              "      <td>1.60%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>1523.31</td>\n",
              "      <td>79,425.23</td>\n",
              "      <td>111,195.32</td>\n",
              "      <td>127,080.36</td>\n",
              "      <td>95,310.27</td>\n",
              "      <td>131,845.88</td>\n",
              "      <td>137,405.64</td>\n",
              "      <td>53,214.90</td>\n",
              "      <td>69,099.95</td>\n",
              "      <td>84,984.99</td>\n",
              "      <td>105,635.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.20%</td>\n",
              "      <td>2.70%</td>\n",
              "      <td>1.70%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>2090.35</td>\n",
              "      <td>108,990.74</td>\n",
              "      <td>152,587.04</td>\n",
              "      <td>174,385.19</td>\n",
              "      <td>130,788.89</td>\n",
              "      <td>180,924.64</td>\n",
              "      <td>188,553.99</td>\n",
              "      <td>73,023.80</td>\n",
              "      <td>94,821.95</td>\n",
              "      <td>116,620.10</td>\n",
              "      <td>144,957.69</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4209b15-edc9-4499-9a88-9cf699834524')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4209b15-edc9-4499-9a88-9cf699834524 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4209b15-edc9-4499-9a88-9cf699834524');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e124a3ce-3c31-4303-bbe6-13a450d650a3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e124a3ce-3c31-4303-bbe6-13a450d650a3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e124a3ce-3c31-4303-bbe6-13a450d650a3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "income.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uvoYh43VOglQ"
      },
      "source": [
        "Well, they we have it - the 1% earn, on average, about £2000 a week. How does that compare to people in the 90% decile? We can access particular *rows* in a dataframe using **.loc[row index]**; because our index is the percentile point, we can just read it off:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "amopH87LOglQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "outputId": "f2fc9856-5bd0-4f4d-a3f7-cd7daabac93c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Net equivalised household income in 2010-11, week        845.54\n",
              "Childless couple, annual income                       44,086.54\n",
              "Couple, two children under 14                         61,721.15\n",
              "Couple, three children under 14                       70,538.46\n",
              "Couple with one child under 14                        52,903.85\n",
              "Couple with two children aged 15 to 18                73,183.65\n",
              "Couple, two children under 14 plus dependent adult    76,269.71\n",
              "Single adult                                          29,537.98\n",
              "Lone parent, one child under 14                       38,355.29\n",
              "Lone parent, two children under 14                    47,172.60\n",
              "Lone parent, two children aged 15-18                  58,635.10\n",
              "ANNOTATIONS                                                 NaN\n",
              "1979 to 1996-97                                           2.50%\n",
              "1996-97 to 2009-10                                        1.70%\n",
              "1996-97 to 2010-11                                        1.20%\n",
              "Name: 90, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>90</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Net equivalised household income in 2010-11, week</th>\n",
              "      <td>845.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <td>44,086.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Couple, two children under 14</th>\n",
              "      <td>61,721.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Couple, three children under 14</th>\n",
              "      <td>70,538.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Couple with one child under 14</th>\n",
              "      <td>52,903.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Couple with two children aged 15 to 18</th>\n",
              "      <td>73,183.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Couple, two children under 14 plus dependent adult</th>\n",
              "      <td>76,269.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Single adult</th>\n",
              "      <td>29,537.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lone parent, one child under 14</th>\n",
              "      <td>38,355.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lone parent, two children under 14</th>\n",
              "      <td>47,172.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lone parent, two children aged 15-18</th>\n",
              "      <td>58,635.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANNOTATIONS</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1979 to 1996-97</th>\n",
              "      <td>2.50%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996-97 to 2009-10</th>\n",
              "      <td>1.70%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996-97 to 2010-11</th>\n",
              "      <td>1.20%</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "income.loc[90]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T9-QS6W4OglU"
      },
      "source": [
        "We can also select a range of values with the \"colon\" notation. This will select the 90-95th percentiles, for example:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VJDvuHzvOglU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 396
        },
        "outputId": "2340378d-9a57-48de-dadc-75d41bc23ada"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Net equivalised household income in 2010-11, week  \\\n",
              "Percentile Point                                                      \n",
              "90                                                           845.54   \n",
              "91                                                           876.63   \n",
              "92                                                           911.29   \n",
              "93                                                           957.14   \n",
              "94                                                          1016.37   \n",
              "95                                                          1075.73   \n",
              "\n",
              "                 Childless couple, annual income  \\\n",
              "Percentile Point                                   \n",
              "90                                     44,086.54   \n",
              "91                                     45,707.74   \n",
              "92                                     47,514.54   \n",
              "93                                     49,905.23   \n",
              "94                                     52,993.38   \n",
              "95                                     56,088.56   \n",
              "\n",
              "                 Couple, two children under 14  \\\n",
              "Percentile Point                                 \n",
              "90                                   61,721.15   \n",
              "91                                   63,990.84   \n",
              "92                                   66,520.35   \n",
              "93                                   69,867.32   \n",
              "94                                   74,190.73   \n",
              "95                                   78,523.99   \n",
              "\n",
              "                 Couple, three children under 14  \\\n",
              "Percentile Point                                   \n",
              "90                                     70,538.46   \n",
              "91                                     73,132.39   \n",
              "92                                     76,023.26   \n",
              "93                                     79,848.36   \n",
              "94                                     84,789.40   \n",
              "95                                     89,741.70   \n",
              "\n",
              "                 Couple with one child under 14  \\\n",
              "Percentile Point                                  \n",
              "90                                    52,903.85   \n",
              "91                                    54,849.29   \n",
              "92                                    57,017.44   \n",
              "93                                    59,886.27   \n",
              "94                                    63,592.05   \n",
              "95                                    67,306.27   \n",
              "\n",
              "                 Couple with two children aged 15 to 18  \\\n",
              "Percentile Point                                          \n",
              "90                                            73,183.65   \n",
              "91                                            75,874.85   \n",
              "92                                            78,874.13   \n",
              "93                                            82,842.68   \n",
              "94                                            87,969.00   \n",
              "95                                            93,107.01   \n",
              "\n",
              "                 Couple, two children under 14 plus dependent adult  \\\n",
              "Percentile Point                                                      \n",
              "90                                                        76,269.71   \n",
              "91                                                        79,074.40   \n",
              "92                                                        82,200.15   \n",
              "93                                                        86,336.04   \n",
              "94                                                        91,678.54   \n",
              "95                                                        97,033.21   \n",
              "\n",
              "                 Single adult Lone parent, one child under 14  \\\n",
              "Percentile Point                                                \n",
              "90                  29,537.98                       38,355.29   \n",
              "91                  30,624.19                       39,765.74   \n",
              "92                  31,834.74                       41,337.65   \n",
              "93                  33,436.50                       43,417.55   \n",
              "94                  35,505.56                       46,104.24   \n",
              "95                  37,579.34                       48,797.05   \n",
              "\n",
              "                 Lone parent, two children under 14  \\\n",
              "Percentile Point                                      \n",
              "90                                        47,172.60   \n",
              "91                                        48,907.29   \n",
              "92                                        50,840.55   \n",
              "93                                        53,398.59   \n",
              "94                                        56,702.91   \n",
              "95                                        60,014.76   \n",
              "\n",
              "                 Lone parent, two children aged 15-18 ANNOTATIONS  \\\n",
              "Percentile Point                                                    \n",
              "90                                          58,635.10         NaN   \n",
              "91                                          60,791.30         NaN   \n",
              "92                                          63,194.33         NaN   \n",
              "93                                          66,373.95         NaN   \n",
              "94                                          70,481.19         NaN   \n",
              "95                                          74,597.79         NaN   \n",
              "\n",
              "                 1979 to 1996-97 1996-97 to 2009-10 1996-97 to 2010-11  \n",
              "Percentile Point                                                        \n",
              "90                         2.50%              1.70%              1.20%  \n",
              "91                         2.60%              1.70%              1.20%  \n",
              "92                         2.60%              1.80%              1.20%  \n",
              "93                         2.70%              1.80%              1.30%  \n",
              "94                         2.90%              1.90%              1.30%  \n",
              "95                         2.90%              2.00%              1.30%  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-236aa820-845b-4e36-979d-c03d829e2202\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Net equivalised household income in 2010-11, week</th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <th>Couple, two children under 14</th>\n",
              "      <th>Couple, three children under 14</th>\n",
              "      <th>Couple with one child under 14</th>\n",
              "      <th>Couple with two children aged 15 to 18</th>\n",
              "      <th>Couple, two children under 14 plus dependent adult</th>\n",
              "      <th>Single adult</th>\n",
              "      <th>Lone parent, one child under 14</th>\n",
              "      <th>Lone parent, two children under 14</th>\n",
              "      <th>Lone parent, two children aged 15-18</th>\n",
              "      <th>ANNOTATIONS</th>\n",
              "      <th>1979 to 1996-97</th>\n",
              "      <th>1996-97 to 2009-10</th>\n",
              "      <th>1996-97 to 2010-11</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>845.54</td>\n",
              "      <td>44,086.54</td>\n",
              "      <td>61,721.15</td>\n",
              "      <td>70,538.46</td>\n",
              "      <td>52,903.85</td>\n",
              "      <td>73,183.65</td>\n",
              "      <td>76,269.71</td>\n",
              "      <td>29,537.98</td>\n",
              "      <td>38,355.29</td>\n",
              "      <td>47,172.60</td>\n",
              "      <td>58,635.10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.50%</td>\n",
              "      <td>1.70%</td>\n",
              "      <td>1.20%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>876.63</td>\n",
              "      <td>45,707.74</td>\n",
              "      <td>63,990.84</td>\n",
              "      <td>73,132.39</td>\n",
              "      <td>54,849.29</td>\n",
              "      <td>75,874.85</td>\n",
              "      <td>79,074.40</td>\n",
              "      <td>30,624.19</td>\n",
              "      <td>39,765.74</td>\n",
              "      <td>48,907.29</td>\n",
              "      <td>60,791.30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.60%</td>\n",
              "      <td>1.70%</td>\n",
              "      <td>1.20%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92</th>\n",
              "      <td>911.29</td>\n",
              "      <td>47,514.54</td>\n",
              "      <td>66,520.35</td>\n",
              "      <td>76,023.26</td>\n",
              "      <td>57,017.44</td>\n",
              "      <td>78,874.13</td>\n",
              "      <td>82,200.15</td>\n",
              "      <td>31,834.74</td>\n",
              "      <td>41,337.65</td>\n",
              "      <td>50,840.55</td>\n",
              "      <td>63,194.33</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.60%</td>\n",
              "      <td>1.80%</td>\n",
              "      <td>1.20%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93</th>\n",
              "      <td>957.14</td>\n",
              "      <td>49,905.23</td>\n",
              "      <td>69,867.32</td>\n",
              "      <td>79,848.36</td>\n",
              "      <td>59,886.27</td>\n",
              "      <td>82,842.68</td>\n",
              "      <td>86,336.04</td>\n",
              "      <td>33,436.50</td>\n",
              "      <td>43,417.55</td>\n",
              "      <td>53,398.59</td>\n",
              "      <td>66,373.95</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.70%</td>\n",
              "      <td>1.80%</td>\n",
              "      <td>1.30%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>1016.37</td>\n",
              "      <td>52,993.38</td>\n",
              "      <td>74,190.73</td>\n",
              "      <td>84,789.40</td>\n",
              "      <td>63,592.05</td>\n",
              "      <td>87,969.00</td>\n",
              "      <td>91,678.54</td>\n",
              "      <td>35,505.56</td>\n",
              "      <td>46,104.24</td>\n",
              "      <td>56,702.91</td>\n",
              "      <td>70,481.19</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.90%</td>\n",
              "      <td>1.90%</td>\n",
              "      <td>1.30%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1075.73</td>\n",
              "      <td>56,088.56</td>\n",
              "      <td>78,523.99</td>\n",
              "      <td>89,741.70</td>\n",
              "      <td>67,306.27</td>\n",
              "      <td>93,107.01</td>\n",
              "      <td>97,033.21</td>\n",
              "      <td>37,579.34</td>\n",
              "      <td>48,797.05</td>\n",
              "      <td>60,014.76</td>\n",
              "      <td>74,597.79</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.90%</td>\n",
              "      <td>2.00%</td>\n",
              "      <td>1.30%</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-236aa820-845b-4e36-979d-c03d829e2202')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-236aa820-845b-4e36-979d-c03d829e2202 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-236aa820-845b-4e36-979d-c03d829e2202');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0322d222-3ce7-4c0a-a1b7-75adf1b8ac35\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0322d222-3ce7-4c0a-a1b7-75adf1b8ac35')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0322d222-3ce7-4c0a-a1b7-75adf1b8ac35 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "income.loc[90:95]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5dgcOIQeOglW"
      },
      "source": [
        "## Accessing parts of a dataframe\n",
        "\n",
        "If we want to extract the actual value instead of just the whole row, we need to reference the *column* as well as the row. In pandas, columns are referenced by **column name**:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D9tXjsnGOglW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "outputId": "e98dece3-a88b-4471-8a1e-326d043cc013"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Percentile Point\n",
              "1       33.50\n",
              "2       98.60\n",
              "3      128.56\n",
              "4      151.05\n",
              "5      166.32\n",
              "       ...   \n",
              "95    1075.73\n",
              "96    1174.48\n",
              "97    1302.74\n",
              "98    1523.31\n",
              "99    2090.35\n",
              "Name: Net equivalised household income in 2010-11, week, Length: 99, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Net equivalised household income in 2010-11, week</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>33.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>98.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>128.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>151.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>166.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1075.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>1174.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1302.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>1523.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>2090.35</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>99 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "income['Net equivalised household income in 2010-11, week']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5-9Rh1x1OglZ"
      },
      "source": [
        "So, to access a particular cell, we tell Python the row and the column (this is pretty simple - the same way we tell excel to access cell \"A34\" meaning Column A, Row 34). One way we do that in pandas is to select the column, and then use .loc[] on the index."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3e7BrLoCOglZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "51bc66f8-73fe-477c-f4be-327a03a664de"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(845.54)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "income['Net equivalised household income in 2010-11, week'].loc[90]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1TBCVuLQOglc"
      },
      "source": [
        "We've accessed row 90 of the column called 'Net equivalised household income in 2010-11, week'; can we access the data the other way around - can we first take the row and then specify a column? Let's try:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "R7Ix_HYPOglc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "810cb0a6-dfaf-4d38-94f6-d75c1c7b15e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(845.54)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "income.loc[90]['Net equivalised household income in 2010-11, week']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vrLFa4LjOgle"
      },
      "source": [
        "Yes, this seems to be working fine."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pn1SslxTOglf"
      },
      "source": [
        "### Extension\n",
        "\n",
        "The reason for this is that selecting the column spits out a smaller dataframe, and all dataframes use  \"loc\", so we can use that. Another way to do this would be to use an explicit variable for the dataframe, along the lines of:\n",
        "\n",
        "`smallDataFrame = income['Net equivalised household income in 2010-11, week']`  \n",
        "`smallDataFrame.loc[90]`\n",
        "\n",
        "by doing income\n",
        "\n",
        "`['Net equivalised household income in 2010-11, week'].loc[90]`   \n",
        "\n",
        "we're taking the \"smallDataFrame\" object as an implicit (or hidden) output"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wZeXYNIAOglf"
      },
      "source": [
        "If we want to look at a few rows of data, we can use a range:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PYBoACruOglg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "f8d387de-29b7-401d-e53e-01e78b5fdcad"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Percentile Point\n",
              "90     845.54\n",
              "91     876.63\n",
              "92     911.29\n",
              "93     957.14\n",
              "94    1016.37\n",
              "95    1075.73\n",
              "Name: Net equivalised household income in 2010-11, week, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Net equivalised household income in 2010-11, week</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>845.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>876.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92</th>\n",
              "      <td>911.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93</th>\n",
              "      <td>957.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>1016.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1075.73</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "income['Net equivalised household income in 2010-11, week'].loc[90:95]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ocHXwl23Oglk"
      },
      "source": [
        "So, to recap, we can now access a particular **row** using *loc[index number]*, a particular **column** with the square brackets formalism *dataframename['column name']*, or both *dataframename['column name'].loc[index number]*. We've made a start at being able to get to the bits of data we need."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SuUywdOYOgll"
      },
      "source": [
        "## Exercise:\n",
        "    \n",
        "How do the equivalised incomes of single adults and childless couples compare? Look at the 1st, 99th and 50th percentile and summarise what this tells you about the value or price of coupling."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "income[['Childless couple, annual income','Single adult']].loc[[1, 50, 99]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "id": "gy549WU0wuSq",
        "outputId": "7c0adc99-5d51-4219-8d19-6191634074f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Childless couple, annual income Single adult\n",
              "Percentile Point                                             \n",
              "1                                       1,746.92     1,170.44\n",
              "50                                     21,832.75    14,627.95\n",
              "99                                    108,990.74    73,023.80"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-994e6f19-bada-4cf5-accd-aaa76f00a3b8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <th>Single adult</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1,746.92</td>\n",
              "      <td>1,170.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>21,832.75</td>\n",
              "      <td>14,627.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>108,990.74</td>\n",
              "      <td>73,023.80</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-994e6f19-bada-4cf5-accd-aaa76f00a3b8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-994e6f19-bada-4cf5-accd-aaa76f00a3b8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-994e6f19-bada-4cf5-accd-aaa76f00a3b8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-abe10e11-e014-423b-8bb2-e6728a033326\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-abe10e11-e014-423b-8bb2-e6728a033326')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-abe10e11-e014-423b-8bb2-e6728a033326 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"income[['Childless couple, annual income','Single adult']]\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Percentile Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          50,\n          99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Childless couple, annual income\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"1,746.92\",\n          \"21,832.75\",\n          \"108,990.74\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Single adult\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"1,170.44\",\n          \"14,627.95\",\n          \"73,023.80\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ajwfDhieOgll"
      },
      "source": [
        "## Examining the Distribution\n",
        "\n",
        "Returning to the overall statistics, the 90% percentile earns less than half the top percentile (\"the 1%\"); if you're taking home over £800 as a household, you're in the top 10% of earners.\n",
        "\n",
        "How does\n",
        "1. The income of \"the 1%\" compare with the mean and median across the population, as a proportion?\n",
        "2. How does the 1% compare with the 90th percentile (the 10%)?\n",
        "3. How does the 10% compare with the median and mean?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CzeYPivlOglm"
      },
      "source": [
        "The 1% earn about 60 times the poorest groups in society - and we've made other comparisons. But that's not the whole story. Let's look at the income graph.\n",
        "\n",
        "In pandas, we can plot this fairly easily..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "y5CBXm8HOgln",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 738
        },
        "outputId": "65b4b18f-0bcf-4de5-9327-a04d7c23dd0c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Income (Net, Equivalised) [GBP]')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "income['Net equivalised household income in 2010-11, week'].plot()\n",
        "plt.title('UK Net Equivalised Income by Percentile per week, 2010-11')\n",
        "plt.xlabel('Income Percentile')\n",
        "plt.ylabel('Income (Net, Equivalised) [GBP]')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gqLmgcUaOglp"
      },
      "source": [
        "We see a curve that is pretty linear in the middle region, but curves rapidly upwards in the higher percentile and looks more like a power law."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qkC5oqwwOglp"
      },
      "source": [
        "### Exercise: Means\n",
        "\n",
        "Where does the mean appear here? Draw in a horizontal line to show the mean using **axhline**. Show the median on the same graph. What is the meaning of the median in this context?\n",
        "\n",
        "Hint: Recall that last time we used *axvline* to highlight the mean and standard deviation by drawing vertical lines on the axis. Here, we use *axhline* to draw horizontal lines."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "income['Net equivalised household income in 2010-11, week'].plot()\n",
        "plt.title('UK Net Equivalised Income by Percentile per week, 2010-11')\n",
        "plt.xlabel('Income Percentile')\n",
        "plt.ylabel('Income (Net, Equivalised) [GBP]')\n",
        "\n",
        "plt.axhline(income['Net equivalised household income in 2010-11, week'].mean(), color='red', linestyle='--', label='Mean')\n",
        "plt.axhline(income['Net equivalised household income in 2010-11, week'].median(), color='blue', linestyle='--', label='Median')\n",
        "plt.legend()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 738
        },
        "id": "xJ-qncFx65yV",
        "outputId": "56bce1d1-9ecc-4723-ed62-b75450183b69"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7a7029190e30>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "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smQJpk2bhsePH8PZ2RnNmzdXzVHUq1cv3L17F59++ikyMjLQrVs3vPXWWzh27JhqP4MGDUJ4eDgmT54MU1NTjBkzRu0v0fnp27cvvvvuO1SpUkXty5NMJsOKFSvw8ccfo3379qhWrRoWLFiAwMBAja+bXC7H7Nmz8eDBA9ja2iIgIADz5s0DAFSqVAm7du3CZ599hiFDhiAjIwNVqlRBQECA6kv6nDlzkJKSghEjRsDW1hbjxo3Ds2fPND5+fmbNmgUhBN577z2kpKSgQYMG2LJli6qCXbly5bBs2TIsWLAAW7ZsQatWrTBt2jRMnz4dgGKM0pMnTzB58mTEx8fDyckJXbt2xfvvvw9As7bxKlZWVtiyZQs+/vhjdO/eHZaWlujevTvmzp2b73P0db1etmjRIixevBizZs3CkydPULlyZbz33nsAAFdXV2zatAmffvopOnbsCEdHRwwePBiTJ08u0jE1aS/6sH37dqSlpWH58uVqVRFbtGih6jLXtGlTLF++HJ9//jmWLFkCLy8vrF27Vm1c5KFDhzBt2jTV4wkTJgAApk2bpmo38+bNg0wmw9ixY5GRkYGAgAB89tlnr4zxzTffVI0FA4DOnTsDgNrnjXIZoKisuHPnTlSpUgVnz54FoLi7179/f5w5cwbu7u55HkeSJDRr1gzBwcHw8/MDoGjrdnZ2qFatmtodyICAAGzYsAFff/01vv/+e5iZmcHb2xuDBw9W7etVn3svsrGxwebNmzFkyBC89dZb2LRpk97veBIRkf5IgpOGaC0uLi7PMUBJSUlazymTH60LbpRCS5cuxR9//KE22SsVjO2HiqI0t5+goCB89913OHbsWJ5j/koKffze0QVJkuDq6ooHDx5wjjIqNLYf0lZxtx0zMzONxzuz2yEREZVZwcHBmDFjRolOvIiIqORgt0MiIiqzfvzxR0OHQEREWhBXzgM52YB3HUi2xnfnPz+880Ulzvvvv88uh0RERERlmHzrj5B//xnwMHddAWPG5IuIiIiIiEqWjHTF/waY/7EomHwREREREVHJoky+zJl8ERERERER6YWQy3nni4iIiIiISO8yM/772cLKcHFogckXERERERGVHJnP73pJEmBmbthYConJFxERERERlRzp/433kmQlK50pWdESEREREVHZVkLHewFMvugFU6ZMgZubGz788MNc62bN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1tbWePbsGX8hEhGRXsnlcjx79gzW1taGDoWISO+EXP5C8lUy73yZGjqA0sjU1BQ2NjZITk7W2T7Nzc2RmZmps/1R2cL2Q0XB9mPcbGxsYGrKX+dEVAZkZvz3cwm988VPaz0xNTXV2YSXnGSQioLth4qC7YeIiIyG8q6XJAHm5oaNRUvsdkhERERERMZPWenQwhKSJBk2Fi0x+SIiIiIiIuOXXrKLbQBMvoiIiIiIqCQo4cU2ACZfRERERERUEii7HZbQOb4AJl9ERERERFQS8M4XERERERGR/okSPsEywOSLiIiIiIhKgufJl8Q7X0RERERERHqUzm6HRERERERE+vfCPF8lFZMvIiIiIiIyfsoxX6x2SEREREREpEcsuEFERERERFQM0tntkIiIiIiISO8E5/kiIiIiIiIqBqoxX+x2SEREREREpD/Pux1yni8iIiIiIiJ9YsENIiIiIiKiYsBS80RERERERMWAkywTEREREREVg4wMxf/sdkhERERERKQfIjsLyMlWPOCdLyIiIiIiIj1RjvcCmHwRERERERHpTfrz5MvUDJKJiWFjKQImX0REREREZNyUxTZKcKVDgMkXEREREREZu1IwxxfA5IuIiIiIiIxdeskvMw8w+SIiIiIiImOnuvPF5IuIiIiIiEhvhDL5smS3QyIiIiIiIv3JYLdDIiIiIiIi/Xteal5i8kVERERERKRHrHZIRERERERUDFRjvnjni4iIiIiISH9Y7ZCIiIiIiKgYqApusNshERERERGR3gje+SIiIiIiIioG6Uy+iIiIiIiI9O95t0OWmiciIiIiItInVjskIiIiIiIqBpzni4iIiIiIqBikK6sd8s4XERERERGR/rDaIRERERERkX4JeQ6QmaF4YMluh0RERERERPqhTLwA3vkiIiIiIiLSm4znyZckA8zMDRtLETH5IiIiIiIi4/V8ji9YWkKSJMPGUkRMvoiIiIiIyHill45iGwCTLyIiIiIiMmalZI4vgMkXEREREREZs4zSMccXwOSLiIiIiIiMmfLOlyWTLyIiIiIiIr0RyjFf5ky+iIiIiIiI9Od5t0OJ3Q6JiIiIiIj0iN0OiYiIiIiIikE6qx0SERERERHpH6sdEhERERERFYMMTrJMRERERESkf6oxX+x2SEREREREpDeCd76IiIiIiIiKQQYLbhAREREREelf+vN5vlhqnoiIiIiISI/Y7ZCIiIiIiKgYsNshERERERFRMeA8X0RERERERPolhGC3QyIiIiIiIr3LzgZychQ/M/kiIiIiIiLSE2WXQ4DJFxERERERkd4ouxyamUMyMTFsLDrA5IuIiIiIiIxTeukZ7wUw+SIiIiIiImNViiodAky+iIiIiIjIWCm7HVqW/Dm+ACZfRERERERkrEpRmXmAyRcRERERERkpweSLiIiIiIioGKjGfLHbIRERERERkf48r3YoWfLOFxERERERkf6w2yEREREREVExYLdDIiIiIiKiYsA7X0RERERERMUgnckXERERERGR3glVt0MmX0RERERERPqj7HbIaodERERERER69Dz5klhwg4iIiIiISI9YcIOIiIiIiKgYMPkiIiIiIiIqBunPC25YstshERERERGR/vDOFxERERERkX4JeQ6QmaF4wIIbREREREREeqJMvACWmiciIiIiItKb9OddDmUywNTMsLHoCJMvIiIiIiIyPqrxXlaQJMmwsegIky8iIiIiIjI+Gc8rHZaSYhsAky8iIiIiIjJG6aWr0iHA5IuIiIiIiIxRKSszDzD5IiIiIiIiY6TsdlhKKh0CTL6IiIiIiMgIiYzSNccXwOSLiIiIiIiM0fM7XxK7HRIREREREekRx3wREREREREVA2W1Q0t2OyQiIiIiItIfzvNFRERERERUDNjtkIiIiIiIqBioki92OyQiIiIiItIbkc55voiIiIiIiPTv+Z0vlponIiIiIiLSp1LY7dBUk42Sk5OLdBBra2vIZMzziIiIiIhIQ6Ww2qFGydfbb79dpIPMmTMH9erVK9I+iIiIiIioDEkvfdUONUq+AKBp06bw8PAo1M4zMjKwd+/eQgdFRERERERlXCksNa9x8tW8eXO0atWqUDt/9uwZky8iIiIiIioUIQSQ+Tz5KmvVDocPH45q1aoVeueWlpYYPnw4KleuXOjnEhERERFRGZWdDeTkKH4uawU3unXrptXOzczMtH4uERERERGVUc8SFf+bmJTNbodKN2/eRGxsLOzs7FCrVi2Ym5vrIy4iIiIiIiqrEuIU/5erAKkUVU3XOPlKS0vDZ599hoiICNUyR0dHzJw5E56envqIjYiIiIiIyiDx+HnyVd7FsIHomMbJ1+7duxEREQE/Pz/Uq1cPDx8+xKFDh/D999/jiy++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j4e5uTkaN26M119/HY0aNYKZmZku4yQiIiIiImP3zxVACKByVUiO5Q0djdHRKvmaNGkSYmNjYWpqikaNGmHo0KFo3LgxLCwsdB0fERERERGVECwxXzCtki83Nzf0798fTZs2hZWVla5jIiIiIiKiEkg5uTJLzOdNq+RrxowZuo6DiIiIiIhKMBH3EIh7CJiYAD51DR2OUdIo+YqPjwegKC//4uNXUW5PRERERESlm7LEPKrVhGRpbdBYjJVGydfEiRMBAFu2bIGpqanq8asEBQVpHxkREREREZUY/433amjQOIyZRsnX+PHjAQAmJiZqj4mIiIiIiIQ8B7hxBQCLbRREo+QrICCgwMdERERERFSG3b8DpDwDLK0ALx9DR2O0ZIYOgIiIiIiISjZll0PUrA/peW85yk2raoc7duzQaLvAwEBtdk9ERERERCUIS8xrRqvka/v27Rptx+SLiIiIiKh0E5kZwM1wACy28SpaJV95VTGUy+WIj4/HH3/8gevXr2PWrFlFDo6IiIiIiIzcrXAgOwsoVwGo5GboaIyazsZ8yWQyuLi44K233oKrqyvWrVunq10TEREREZGRElf/AqCocihJkoGjMW56KbhRu3Zt/P333/rYNRERERERGQmRkQER8icAQGrYzMDRGD+9JF+3b99m1ktEREREVMqJ0D8VJeYrVAR8mxo6HKOn1Ziv48eP57k8JSUF169fx7lz59CuXbsiBUZERERERMZLyOUQR/YAAKQOPSHJWGL+VbRKvlasWJHvOjs7O/Tq1YuVDomIiIiISrMrF4BHMYCVDaSW7Q0dTYmgVfK1fPnyXMskSYKNjQ2srKyKHBQRERERERk3+eFdAACpdSdIltaGDaaE0Cr5cnZ21nUcRERERERUQoh7kcA/VwCZDFK7HoYOp8TQS8ENIiIiIiIqvcSR3QAAqUkrSE68MaMpre58DRw4sNDPkSQJ27Zt0+ZwRERERERkJETiY4hzJwEAUsdeBo6mZNEq+erXrx/CwsIQHR0NX19fVK5cGQAQExODy5cvw93dHU2bstQkEREREVFpI47uB3KygRp1IHnWMHQ4JYpWyZeTkxOSkpKwdOlSVeKlFB0djU8++QTlypVDhw4ddBIkEREREREZnshIhzj+BwBA1oF3vQpLqzFfe/bsQefOnXMlXgBQpUoVdOnSBXv27ClycERE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G3XllVdq3759nmN33HGH7rjjDv81CgCGqWB/NwAAMHRt3LhR//3f/6177rlHaWlp/m6OX1155ZWer40xioqKUkJCgq644grNmDHDjy0bGC+99JLi4+N16qmn+rspABCwCF8AAPTQ7Nmzdc4550iS9u3bp7/+9a+66667dNNNN2nOnDl+bl3/vPzyyzr99NM7hK9zzjlHZ5xxhkJCQvzUMgAIHIQvAAB6KC4uzhO+JOnUU0/Vz372M7355pv9Dl/19fUKDw/vbxMHnMvlUmhoqL+bAQABgfAFAOiV3//+9/roo4/029/+Vo8//ri2bt2q0NBQzZs3T9dcc41crvbLid1ut95++229++67KisrU3h4uFJTU/Wd73zHM42xpaVFL7/8sjZt2qSDBw9q/PjxOvPMM7V48WKvsy033HCDEhISdNlll+mZZ55RYWGhYmNjde2112rGjBn6+OOPtXbtWpWVlSk+Pl7Lly9XSkqKV9uLi4v13HPPKTs7W42NjUpISNCiRYt08skn9+m1SExM1JgxY7yuh+rJc7RN57zjjju0efNmffTRR2ppadEf//hHSdLnn3+uV155Rfn5+TLGaMqUKbr00kt11llneR5j586dWrt2rXJyctTS0qK0tDR997vfVWZmpqdm7dq1evHFF/XQQw/pL3/5iz755BNZa3XaaafpuuuuU1hYmKT2KZWbNm3Spk2bJEnz5s3TDTfc4Gnrww8/rJiYmC5fi6amJr388st6//33dfDgQY0bN05nnnmmrrrqKs6aAUArFtwAAPSa2+3W6tWrNWbMGH3ve9/T8ccfr3Xr1mn9+vVedY888oieeuopRUdH6+qrr9bChQsVEhKinTt3etWsXbtWKSkpWrp0qY477ji98sorevDBBzs8b1lZmR566CGddNJJWrJkiWpqanTffffp/fff19NPP62zzz5bixcv1t69e/XAAw/I7XZ77ltYWKhbbrlFxcXFWrhwob73ve8pLCxMv/71r7Vly5Y+vQ7V1dWqqanR6NGj+/Qcjz/+uIqKirRo0SJdfvnlkpxgdu+996q6uloLFy7UkiVLlJSUpC+++MJzv+zsbN1+++2qq6vT4sWL9d3vfle1tbW66667lJub2+F5HnjgAdXV1WnJkiWaO3euNm7cqBdeeMFz+4033qiQkBAdd9xxuvHGG3XjjTfqggsu6PHr4Ha79atf/Uqvv/66TjrpJF177bU65ZRT9MYbb+iBBx7o8eMAQKDjzBcAoNeampo0d+5cLVq0SJJ04YUX6he/+IXee+89XXjhhZKcgLBx40Z961vf0g9+8APPfS+77DJZayVJBQUF2rRpk8477zwtX75cknTRRRdp3Lhxev3115Wdna2ZM2d67ltSUqK7775bGRkZkqT4+HitXr1ajz76qB588EFFR0dLkkaPHq0//OEP2r59u2cxjLYQeM8993jOxFx00UW67bbb9Kc//alHC000NTWpqqpKknPN1//+7//K7XZr7ty5fXqO0aNH67bbbvOcLaytrdUf//hHpaen6/bbb/ea7tf2mllr9dhjj2nGjBm6+eabZYyRJF1wwQVauXKlnnvuOa1atcrreZKTk/WjH/3I8311dbU2bNiga665RpJzXddjjz2mmJgYr2mVPfXBBx/oq6++0p133ul15i0hIUGPPfaYduzYoenTp/f6cQEg0HDmCwDQJ20hq01mZqb27t3r+f7jjz+WMUaLFy/ucN+2wPD5559LkhYsWOB1+2WXXSZJ+uyzz7yOx8fHe4KXJE2bNk2SNHPmTE/wkqT09HRJ8rSnurpa2dnZmjt3rurq6lRVVaWqqiodPnxYWVlZKi0tVXl5+TF/5vfee0/Lli3TsmXLdPPNN+ubb77RggULdMkll/TpOc4//3yvaZpfffWV6urqdPnll3e4zqrtNSsoKFBpaanOOussHT582PM89fX1mjlzprZv3+51xk9Sh7NYmZmZOnz4sGpra4/5M/fERx99pPj4eE2ZMsXTnqqqKk9w3rZt24A8DwAMd5z5AgD0WkhIiMaOHet1bNSoUaqpqfF8v3fvXo0fP94zJa8z+/fvlzFGsbGxXsejoqI0atQoHThwwOv4kQFLkiIjIyVJEydO7PR4W3vKyspkrdXzzz+v559/vtO2VFZWasKECV22VZJOPvlkXXzxxTLGKCIiQvHx8Z5FMvryHEdfQ1VWVibJuZasK6WlpZKca++6Ultb6/W6H/26td1WU1Pjea36o7S0VMXFxVq2bFmnt1dWVvb7OQAgEBC+AAC9duTZmoHQdlanr8/b1fG2qXptZ4Iuu+wyZWVldVp7dADszMSJEzV79uxOb+vLc/RlFcG2n+maa65RcnJypzVHr5p4rNenv6y1SkxM1Pe///1Obz86/AHASEX4AgAMismTJ+vLL79UdXV1l2e/Jk2aJGutSktLFR8f7zleUVGhmpqaAXvTPnnyZElSUFBQl+FpKDxHWzjbs2dPl2Gw7XkiIyMH9GfpaQDuzOTJk7V7927NmjWrX48DAIGOa74AAIPitNNOk7XWa1W9Nm1nXNr2xnrzzTe9bl+3bp0k6cQTTxyQtowbN04zZszQ+vXrdejQoQ63ty2i4e/nmD17tiIiIvTKK6+osbHR67a21yw1NVWTJ0/W66+/rvr6+j49T2fCwsK8po32xty5c1VeXq533323w22NjY2dthMARiLOfAEABsXMmTN1zjnn6K233lJZWZmysrJkrdX27ds1c+ZMXXzxxUpOTta8efO0fv161dTU6Pjjj1dubq42bdqkU045xWulw/667rrrdOutt+pnP/uZzj//fMXExKiyslI5OTkqLy/Xr3/9a78/R2RkpJYuXapHHnlE//Ef/6GzzjpLo0aN0u7du9XQ0KAbb7xRLpdLy5cv1y9/+UutXLlS8+fP14QJE1ReXq5t27YpIiJCN910U6/bnpqaqq1bt2rdunUaP368YmJiPAuaHMs555yjv//973rssceUnZ2tzMxMud1uFRcX6+9//7tuueUWz75uADCSEb4AAINmxYoVSkxM1IYNG/Tss88qMjJSaWlpXisWLl++XJMnT9bGjRu1ZcsWRUVFaeHChZ2uktgf8fHxuvfee/XCCy9o48aNOnz4sMaNG6fk5GR9+9vfHjLPcd5552ns2LF69dVX9Ze//EVBQUGaOnWqLr30Uk/NjBkztHr1ar344ov661//qvr6ekVFRSk9Pb1X+3MdaenSpXr00Uf13HPPqbGxUfPmzetx+HK5XPr3f/93vfHGG/rb3/6mTz75RKGhoZo8ebIuueQSxcXF9alNABBojB2oq20BAAAAAF3imi8AAAAA8AHCFwAAAAD4AOELAAAAAHyA8AUAAAAAPkD4AgAAAAAfIHwBAAAAgA8QvgAAAADABwhfAAAAAOADhC8AAAAA8AHCFwAAAAD4AOELAAAAAHyA8AUAAAAAPvD/AfM6D/JKGpWDAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J7_ZodE2Oglq"
      },
      "source": [
        "### Extension: Accessing cells\n",
        "\n",
        "There are a number of ways to access elements of the dataframe: we've shown how to access columns by the [*'name of column'*] method, and rows via the .loc[*index*] method; and how we can select a range. There are also .iloc methods to select by number rather than name; you should become familiar with these on the documentation page for pandas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KB1-kYCeOglq"
      },
      "source": [
        "## Comparing segments\n",
        "\n",
        "Earlier, we compared some summary statistics of single people and couples. Let's look at the wider curve for more than one group, now:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WTfrHUP6Oglr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "outputId": "bc8ec33e-b01c-4154-ce10-f65118f98077"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "no numeric data to plot",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3992417964.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#This is going to throw a load of errors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mincome\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Single adult'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Lone parent, one child under 14'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1028\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1029\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1030\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mplot_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1031\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1032\u001b[0m     \u001b[0m__call__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m__doc__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/plotting/_matplotlib/__init__.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(data, kind, **kwargs)\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ax\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"left_ax\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m     \u001b[0mplot_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPLOT_CLASSES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     72\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    497\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 499\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    500\u001b[0m         \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/plotting/_matplotlib/core.py\u001b[0m in \u001b[0;36m_compute_plot_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    696\u001b[0m         \u001b[0;31m# no non-numeric frames or series allowed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    697\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_empty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 698\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no numeric data to plot\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    699\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumeric_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_to_ndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: no numeric data to plot"
          ]
        }
      ],
      "source": [
        "#This is going to throw a load of errors\n",
        "income[['Single adult','Lone parent, one child under 14']].plot()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vFLPCI8hOglt"
      },
      "source": [
        "## Warning\n",
        "\n",
        "This isn't looking good. There's a load of text and no graph. If you've not seen this before, it's an error - something has gone wrong. Generally, if we look at the **final** line, it should tell us what's wrong, in this case there's \"no numeric data to plot\", which is weird, because we've seen the data and have even plotted some of it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b83Hwg61Oglu"
      },
      "source": [
        "## Messy Data\n",
        "\n",
        "DataFrames, as we are starting to see, give us the chance to plot, chop, slice and data to help us make sense of it. Here, we will create a **new** DataFrame to take only two columns of data, and get rid of any blank cells and any cells which are not being read as numbers - normally a sign of a missing value or a non-numerical character. Why could this be happening? It could be\n",
        "\n",
        "- due to blank spaces in the text file\n",
        "\n",
        "- due to letters where there should be numbers\n",
        "\n",
        "- due to characters (\",\", \"-\", etc) that shouldn't really be there\n",
        "\n",
        "In general, there will be some detective work required to figure out what's wrong in our text file. Your best bet is sometimes to open up the data in a text editor, like I've done here:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fLWfyIclOglu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "3c40ec37-227c-4ea5-b60b-5eabae563dda"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "from IPython.display import Image\n",
        "\n",
        "data_path = \"https://s3.eu-west-2.amazonaws.com/qm2/wk2/data.png\"\n",
        "Image(data_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zBz1Jv4kOglw"
      },
      "source": [
        "That's a screenshot of our datafile, opened up in a text editor. As we can see, these numbers are separated by commas and surrounded by quotation marks - this is normal, and what .csv files are supposed to look like. However, there are a lot of commas within the numbers - which makes it easier for people to read, but confuses software. Luckily, Python has a method for dealing with this - the \"replace\" method.\n",
        "\n",
        "Unfortunately, this dataframe is quite messy, so I'm going to have to extract just the columns of data I'm interested in to make it work. I'll do that by creating a new dataframe:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JBxuM0aKOglx"
      },
      "source": [
        "## Example: Cleaning data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lzCSbkcKOglx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "outputId": "98d637b1-33b0-457f-dbd5-d946203b0e03"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Childless couple, annual income Couple, two children under 14\n",
              "Percentile Point                                                              \n",
              "1                                       1,746.92                      2,445.69\n",
              "2                                       5,141.01                      7,197.41\n",
              "3                                       6,703.11                      9,384.36\n",
              "4                                       7,875.75                     11,026.05\n",
              "5                                       8,671.91                     12,140.68"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cb53df6b-3d08-4f5e-893d-e1d8230a3dec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <th>Couple, two children under 14</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1,746.92</td>\n",
              "      <td>2,445.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5,141.01</td>\n",
              "      <td>7,197.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6,703.11</td>\n",
              "      <td>9,384.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7,875.75</td>\n",
              "      <td>11,026.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8,671.91</td>\n",
              "      <td>12,140.68</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb53df6b-3d08-4f5e-893d-e1d8230a3dec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cb53df6b-3d08-4f5e-893d-e1d8230a3dec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cb53df6b-3d08-4f5e-893d-e1d8230a3dec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ab6d0747-76bd-4e38-963e-9717c313b242\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab6d0747-76bd-4e38-963e-9717c313b242')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ab6d0747-76bd-4e38-963e-9717c313b242 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "clean",
              "summary": "{\n  \"name\": \"clean\",\n  \"rows\": 99,\n  \"fields\": [\n    {\n      \"column\": \"Percentile Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          63,\n          41,\n          96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Childless couple, annual income\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"26,058.46\",\n          \"19,349.72\",\n          \"61,237.18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple, two children under 14\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"36,481.84\",\n          \"27,089.61\",\n          \"85,732.05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "clean = income[['Childless couple, annual income','Couple, two children under 14']]\n",
        "clean.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M8eg6tsDOglz"
      },
      "source": [
        "We see those pesky commas. Now we can get on with cleaning up the data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8YAEBL4aOgl0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "outputId": "3a16dda7-d9fe-4d8c-adcc-026c1f6215b9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Childless couple, annual income  \\\n",
              "Percentile Point                                    \n",
              "1                                         1746.92   \n",
              "2                                         5141.01   \n",
              "3                                         6703.11   \n",
              "4                                         7875.75   \n",
              "5                                         8671.91   \n",
              "\n",
              "                  Couple, two children under 14  \n",
              "Percentile Point                                 \n",
              "1                                       2445.69  \n",
              "2                                       7197.41  \n",
              "3                                       9384.36  \n",
              "4                                      11026.05  \n",
              "5                                      12140.68  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-034a02ec-4f36-487d-832b-86dce8d6b6c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <th>Couple, two children under 14</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1746.92</td>\n",
              "      <td>2445.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5141.01</td>\n",
              "      <td>7197.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6703.11</td>\n",
              "      <td>9384.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7875.75</td>\n",
              "      <td>11026.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8671.91</td>\n",
              "      <td>12140.68</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-034a02ec-4f36-487d-832b-86dce8d6b6c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-034a02ec-4f36-487d-832b-86dce8d6b6c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-034a02ec-4f36-487d-832b-86dce8d6b6c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e34d15f6-b312-4099-8873-4e9d8ceb1626\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e34d15f6-b312-4099-8873-4e9d8ceb1626')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e34d15f6-b312-4099-8873-4e9d8ceb1626 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "clean",
              "summary": "{\n  \"name\": \"clean\",\n  \"rows\": 99,\n  \"fields\": [\n    {\n      \"column\": \"Percentile Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          63,\n          41,\n          96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Childless couple, annual income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15965.475233365678,\n        \"min\": 1746.92,\n        \"max\": 108990.74,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          26058.46,\n          19349.72,\n          61237.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple, two children under 14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22351.6652855204,\n        \"min\": 2445.69,\n        \"max\": 152587.04,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          36481.84,\n          27089.61,\n          85732.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "clean=clean.replace(',', '', regex=True)\n",
        "\n",
        "# In addition, missing values are sometimes written as '-', in order for Python to understand that it is just a missing numerical\n",
        "# value, all '-' need to be replaced with 'NaN'.\n",
        "clean = clean.replace('-', 'NaN', regex=True).astype('float')\n",
        "clean.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5VNc0tutOgl2"
      },
      "source": [
        "**Extension**: \"**Regex**\" refers to \"**Reg**ular **Ex**pression\", which is a way of replacing and cleaning text. It's a bit beyond the scope of this class, but worth looking into if you're interested in programming more widely."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z0dJN0OjOgl2"
      },
      "source": [
        "This seems to have done the job. We've also put a line in the code to get rid of dashes - a way that data collectors will sometimes represent missing data. Now let's plot this."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7DPJOfOnOgl2"
      },
      "source": [
        "## Asking more questions of the data\n",
        "For me, this data starts to beg further questions. How would we answer these?\n",
        "\n",
        "- If the top 20% of income shows such a sharp increase, how do we know that there isn't a similar uptick *within* the 1%? We've already seen that the mean of the dataset as a whole is much less than the half the maximum category (it's 25% of the maximum). What if that's true within the 1%, and £2,000/week as a fraction of the 0.1%, or the 0.01%?\n",
        "\n",
        "- How does this break down for gender, or educational background, or other factors like ethnicity or country of origin?\n",
        "\n",
        "- Which parts of the income curve show greater gaps between these subgroups and what might it say about the underlying causal mechanisms?\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GPSVukHaOgl3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 738
        },
        "outputId": "64db8af5-eb75-4fe3-d782-280470a36a42"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Income Per Week [GBP]')"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "clean.plot()\n",
        "plt.title('A Modest Proposal: The fiscal benefits of childbirth')\n",
        "plt.xlabel('Percentile')\n",
        "plt.ylabel('Income Per Week [GBP]')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4TFQznjUOgl5"
      },
      "source": [
        "## Exercise:\n",
        "\n",
        "Previously, we'd examined income gaps between single people and couples (how very romantic). Repeat the above exercise (cleaning and plotting income data) for the columns we used above for single people and childless couples. Reflect and comment on the differences."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XtbGVYEkOgl8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 722
        },
        "outputId": "12de63c0-090d-4185-d6c8-77037466f157"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "data_path = \"./data/wk2/incomes.csv\"\n",
        "income = pd.read_csv(data_path, index_col=0)\n",
        "\n",
        "clean = income[['Single adult', 'Childless couple, annual income']].copy()\n",
        "\n",
        "clean = clean.replace(',', '', regex=True)\n",
        "clean = clean.replace('-', 'NaN', regex=True).astype(float)\n",
        "\n",
        "clean.plot()\n",
        "plt.title('A Modest Proposal: The fiscal benefits of childbirth - CLEAN')\n",
        "plt.xlabel('Percentile')\n",
        "plt.ylabel('Income (£ per year)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "9XLsxdUFB0gG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "comments:\n",
        "\n",
        "The firts graph compares childless couples with couples who have children. Here, incomes are slightly lower for families, especially at higher percentiles, showing the cost of raising children.\n",
        "\n",
        "The second graph shows that childless couples consistently earn more than single adults — showing the clear financial benefit of sharing costs.\n",
        "\n",
        "Together, they show that coupling brings financial advantages, while having children reduces disposable income even for higher earners."
      ],
      "metadata": {
        "id": "m5vvivDBDVPO"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V9fRF22DOgl-"
      },
      "source": [
        "So far, we've dealt with selecting data in a particular row of column by index or label. What if we now want to filter the data by *value*? For example, let's say I want to see the data for all Childless couples who earn more than 50,000 (net equivalised) pounds every year. This looks like:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aa1kaQwROgl_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "outputId": "e6039491-8c86-4746-b097-c488c61c5cca"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Childless couple, annual income  \\\n",
              "Percentile Point                                    \n",
              "94                                       52993.38   \n",
              "95                                       56088.56   \n",
              "96                                       61237.18   \n",
              "97                                       67925.07   \n",
              "98                                       79425.23   \n",
              "99                                      108990.74   \n",
              "\n",
              "                  Couple, two children under 14  \n",
              "Percentile Point                                 \n",
              "94                                     74190.73  \n",
              "95                                     78523.99  \n",
              "96                                     85732.05  \n",
              "97                                     95095.10  \n",
              "98                                    111195.32  \n",
              "99                                    152587.04  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f4e77bac-911f-4817-8fa5-3c22e85e2270\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "      <th>Couple, two children under 14</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>52993.38</td>\n",
              "      <td>74190.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>56088.56</td>\n",
              "      <td>78523.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>61237.18</td>\n",
              "      <td>85732.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>67925.07</td>\n",
              "      <td>95095.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>79425.23</td>\n",
              "      <td>111195.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>108990.74</td>\n",
              "      <td>152587.04</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4e77bac-911f-4817-8fa5-3c22e85e2270')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f4e77bac-911f-4817-8fa5-3c22e85e2270 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f4e77bac-911f-4817-8fa5-3c22e85e2270');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4e36acb2-d646-493a-8db0-70a5e7e8aefd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e36acb2-d646-493a-8db0-70a5e7e8aefd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4e36acb2-d646-493a-8db0-70a5e7e8aefd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"clean[clean['Childless couple, annual income']>50000]\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Percentile Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 94,\n        \"max\": 99,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          94,\n          95,\n          99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Childless couple, annual income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20811.36923247259,\n        \"min\": 52993.38,\n        \"max\": 108990.74,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          52993.38,\n          56088.56,\n          108990.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Couple, two children under 14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29135.917832396095,\n        \"min\": 74190.73,\n        \"max\": 152587.04,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          74190.73,\n          78523.99,\n          152587.04\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "clean = income[['Childless couple, annual income','Couple, two children under 14']]\n",
        "clean = clean.replace(',', '', regex=True)\n",
        "clean = clean.replace('-', 'NaN', regex=True).astype('float')\n",
        "clean[clean['Childless couple, annual income']>50000]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "li_efWEHOgmA"
      },
      "source": [
        "The key line of code for selection is:\n",
        "\n",
        "```python\n",
        "clean[clean['Childless couple, annual income']>50000]\n",
        "```\n",
        "\n",
        "Let's break this down: we're used to using *dataframe*[*some selection*] from earlier. Here \"some selection\" is\n",
        "\n",
        "\n",
        "```python\n",
        "clean['Childless couple, annual income']>50000\n",
        "```\n",
        "\n",
        "In other words, this command is returning a set of indices where that statement is true. We can see this explicitly:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0DDpwa5wOgmB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "outputId": "db813237-d8bd-4287-97d1-a9d654e3bec3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Percentile Point\n",
              "1     False\n",
              "2     False\n",
              "3     False\n",
              "4     False\n",
              "5     False\n",
              "      ...  \n",
              "95     True\n",
              "96     True\n",
              "97     True\n",
              "98     True\n",
              "99     True\n",
              "Name: Childless couple, annual income, Length: 99, dtype: bool"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Childless couple, annual income</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentile Point</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>99 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> bool</label>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "clean['Childless couple, annual income']>50000"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "voVyBM4dOgmD"
      },
      "source": [
        "So python is picking the values where this statement is true - i.e. where the 'Childless couple...' column has values greater than 50000. Then this selection is passed to the dataframe, and the dataframe shows the correct rows."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q6E0bA_1OgmD"
      },
      "source": [
        "We won't dwell on comparative operative, here we've used \">\" to mean \"is greater than\"; you can also use:\n",
        "\n",
        "- == to mean 'is equal to' [why the double equals?]\n",
        "- <> or != to mean 'is not equal to'\n",
        "- < to mean 'is less than'\n",
        "- the symbol >= to mean 'is greater than or equal to'\n",
        "- <= to mean 'is less than or equal to'\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jlUpSnksOgmE"
      },
      "source": [
        "## Exercise\n",
        "On an approporiately labelled graph, plot the incomes of all single adults whose net equivalised income is less than or equal to £10,000. What proportion of the population is this?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "a6FetAAoHXSE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bg_cvi27OgmE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 738
        },
        "outputId": "5fcc0b96-6983-412d-9744-344ac227e133"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Proportion of single adults earning ≤ £10,000: 23.2%\n"
          ]
        }
      ],
      "source": [
        "low_income = clean[clean['Single adult'] <= 10000]\n",
        "\n",
        "low_income.plot()\n",
        "plt.title('Single Adults with Income ≤ £10,000 per year')\n",
        "plt.xlabel('Percentile')\n",
        "plt.ylabel('Income (£ per year)')\n",
        "plt.show()\n",
        "\n",
        "share = (len(low_income) / len(clean)) * 100\n",
        "print(f\"Proportion of single adults earning ≤ £10,000: {share:.1f}%\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VzmYb7Xp2GTV"
      },
      "source": [
        "# Extension: Web Scraping\n",
        "\n",
        "In this example, we've been working with a .csv file that contains all the data we want. That's not always the case. Let's say we're interested in getting the data from a table on a website. Websites are built using HTML code, so what we need to figure out how to look inside the website's code and pull out the data we want. Luckily, pandas has a built in function that can automatically recognize HTML tables in websites and turn them into dataframes.\n",
        "\n",
        "Let's start with the [Netflix Top 10](https://top10.netflix.com/) website. Click on the link and have a look around. You'll notice two tables: the first showing the top 10 films this week, and the second (farther down) showing the most popular filsms based on their first 28 days on netflix.\n",
        "\n",
        "We can download both of these tables into python using one pandas function: read_html"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DAhED82b2GTV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9f2d9c6-3db0-498e-e5e2-4cceb0358a9a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[                       Ranking  Unnamed: 1     Views Runtime  Hours Viewed\n",
            "0      01The Woman in Cabin 10           2  30100000    1:35      47700000\n",
            "1       02The Perfect Neighbor           1  16700000    1:39      27500000\n",
            "2         03KPop Demon Hunters          18  16200000    1:40      27000000\n",
            "3  04My Father, the BTK Killer           2   6400000    1:34      10100000\n",
            "4                  05The Twits           1   5900000    1:43      10200000\n",
            "5                   06Vacation           1   4300000    1:39       7100000\n",
            "6            07Despicable Me 3          11   3600000    1:30       5400000\n",
            "7  08The Secret Life of Pets 2          10   3200000    1:26       4600000\n",
            "8       09Taken in Plain Sight           1   2900000    1:26       4200000\n",
            "9            10The Maze Runner           4   2800000    1:53       5200000]\n"
          ]
        }
      ],
      "source": [
        "url='https://top10.netflix.com/'\n",
        "\n",
        "tables=pandas.read_html(url)\n",
        "\n",
        "print(tables)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8i1C1DJX2GTV"
      },
      "source": [
        "When we print the results of what was scraped, it's pretty ugly. One of the reasons is that the `tables` variable is actually a *list* of dataframes. Because there were two tables on our website, `read_html` has returned both of those tables and put them in a list. let's save the first table as a new dataframe called `top10` and have a closer look."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X4VZz7jc2GTV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "outputId": "18152e40-5051-4e70-a5ff-d9a143bd83fb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Ranking  Unnamed: 1     Views Runtime  Hours Viewed\n",
              "0      01The Woman in Cabin 10           2  30100000    1:35      47700000\n",
              "1       02The Perfect Neighbor           1  16700000    1:39      27500000\n",
              "2         03KPop Demon Hunters          18  16200000    1:40      27000000\n",
              "3  04My Father, the BTK Killer           2   6400000    1:34      10100000\n",
              "4                  05The Twits           1   5900000    1:43      10200000\n",
              "5                   06Vacation           1   4300000    1:39       7100000\n",
              "6            07Despicable Me 3          11   3600000    1:30       5400000\n",
              "7  08The Secret Life of Pets 2          10   3200000    1:26       4600000\n",
              "8       09Taken in Plain Sight           1   2900000    1:26       4200000\n",
              "9            10The Maze Runner           4   2800000    1:53       5200000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d7c36d2c-7371-417e-985e-29f4e81de085\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ranking</th>\n",
              "      <th>Unnamed: 1</th>\n",
              "      <th>Views</th>\n",
              "      <th>Runtime</th>\n",
              "      <th>Hours Viewed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>01The Woman in Cabin 10</td>\n",
              "      <td>2</td>\n",
              "      <td>30100000</td>\n",
              "      <td>1:35</td>\n",
              "      <td>47700000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>02The Perfect Neighbor</td>\n",
              "      <td>1</td>\n",
              "      <td>16700000</td>\n",
              "      <td>1:39</td>\n",
              "      <td>27500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>03KPop Demon Hunters</td>\n",
              "      <td>18</td>\n",
              "      <td>16200000</td>\n",
              "      <td>1:40</td>\n",
              "      <td>27000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>04My Father, the BTK Killer</td>\n",
              "      <td>2</td>\n",
              "      <td>6400000</td>\n",
              "      <td>1:34</td>\n",
              "      <td>10100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>05The Twits</td>\n",
              "      <td>1</td>\n",
              "      <td>5900000</td>\n",
              "      <td>1:43</td>\n",
              "      <td>10200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>06Vacation</td>\n",
              "      <td>1</td>\n",
              "      <td>4300000</td>\n",
              "      <td>1:39</td>\n",
              "      <td>7100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>07Despicable Me 3</td>\n",
              "      <td>11</td>\n",
              "      <td>3600000</td>\n",
              "      <td>1:30</td>\n",
              "      <td>5400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>08The Secret Life of Pets 2</td>\n",
              "      <td>10</td>\n",
              "      <td>3200000</td>\n",
              "      <td>1:26</td>\n",
              "      <td>4600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>09Taken in Plain Sight</td>\n",
              "      <td>1</td>\n",
              "      <td>2900000</td>\n",
              "      <td>1:26</td>\n",
              "      <td>4200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10The Maze Runner</td>\n",
              "      <td>4</td>\n",
              "      <td>2800000</td>\n",
              "      <td>1:53</td>\n",
              "      <td>5200000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7c36d2c-7371-417e-985e-29f4e81de085')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d7c36d2c-7371-417e-985e-29f4e81de085 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d7c36d2c-7371-417e-985e-29f4e81de085');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fc73e331-7a90-4df2-a54a-b5c704551bc3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc73e331-7a90-4df2-a54a-b5c704551bc3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fc73e331-7a90-4df2-a54a-b5c704551bc3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_0da8f45a-5568-4702-9fcd-35cd013c0508\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('top10')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0da8f45a-5568-4702-9fcd-35cd013c0508 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('top10');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top10",
              "summary": "{\n  \"name\": \"top10\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Ranking\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"09Taken in Plain Sight\",\n          \"02The Perfect Neighbor\",\n          \"06Vacation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Views\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9023481,\n        \"min\": 2800000,\n        \"max\": 30100000,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2900000,\n          16700000,\n          4300000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Runtime\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"1:39\",\n          \"1:30\",\n          \"1:35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hours Viewed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14498658,\n        \"min\": 4200000,\n        \"max\": 47700000,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          4200000,\n          27500000,\n          7100000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "top10=tables[0]\n",
        "top10"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6EHOEFVI2GTV"
      },
      "source": [
        "This looks more like the dataframes we were looking at earlier. There's a big chunk of text (this is HTML code, the language websites are built with) where the name of the second column should be. `read_html` is usually pretty smart, and can actually read the column names from the tables on the website. It seems to have gotten confused for this one column. If we print the columns from the  We can rename that column using the `rename` function. Since we know it's the second column, we can select it with `top10.columns[1]`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8oNblpdU2GTV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "outputId": "fe5f9baa-cd70-4cb1-9e4d-94ac3b1e0bcf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Ranking  Title     Views Runtime  Hours Viewed\n",
              "0      01The Woman in Cabin 10      2  30100000    1:35      47700000\n",
              "1       02The Perfect Neighbor      1  16700000    1:39      27500000\n",
              "2         03KPop Demon Hunters     18  16200000    1:40      27000000\n",
              "3  04My Father, the BTK Killer      2   6400000    1:34      10100000\n",
              "4                  05The Twits      1   5900000    1:43      10200000\n",
              "5                   06Vacation      1   4300000    1:39       7100000\n",
              "6            07Despicable Me 3     11   3600000    1:30       5400000\n",
              "7  08The Secret Life of Pets 2     10   3200000    1:26       4600000\n",
              "8       09Taken in Plain Sight      1   2900000    1:26       4200000\n",
              "9            10The Maze Runner      4   2800000    1:53       5200000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9f628de-409d-496a-a91c-5dec475737e2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ranking</th>\n",
              "      <th>Title</th>\n",
              "      <th>Views</th>\n",
              "      <th>Runtime</th>\n",
              "      <th>Hours Viewed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>01The Woman in Cabin 10</td>\n",
              "      <td>2</td>\n",
              "      <td>30100000</td>\n",
              "      <td>1:35</td>\n",
              "      <td>47700000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>02The Perfect Neighbor</td>\n",
              "      <td>1</td>\n",
              "      <td>16700000</td>\n",
              "      <td>1:39</td>\n",
              "      <td>27500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>03KPop Demon Hunters</td>\n",
              "      <td>18</td>\n",
              "      <td>16200000</td>\n",
              "      <td>1:40</td>\n",
              "      <td>27000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>04My Father, the BTK Killer</td>\n",
              "      <td>2</td>\n",
              "      <td>6400000</td>\n",
              "      <td>1:34</td>\n",
              "      <td>10100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>05The Twits</td>\n",
              "      <td>1</td>\n",
              "      <td>5900000</td>\n",
              "      <td>1:43</td>\n",
              "      <td>10200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>06Vacation</td>\n",
              "      <td>1</td>\n",
              "      <td>4300000</td>\n",
              "      <td>1:39</td>\n",
              "      <td>7100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>07Despicable Me 3</td>\n",
              "      <td>11</td>\n",
              "      <td>3600000</td>\n",
              "      <td>1:30</td>\n",
              "      <td>5400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>08The Secret Life of Pets 2</td>\n",
              "      <td>10</td>\n",
              "      <td>3200000</td>\n",
              "      <td>1:26</td>\n",
              "      <td>4600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>09Taken in Plain Sight</td>\n",
              "      <td>1</td>\n",
              "      <td>2900000</td>\n",
              "      <td>1:26</td>\n",
              "      <td>4200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10The Maze Runner</td>\n",
              "      <td>4</td>\n",
              "      <td>2800000</td>\n",
              "      <td>1:53</td>\n",
              "      <td>5200000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9f628de-409d-496a-a91c-5dec475737e2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9f628de-409d-496a-a91c-5dec475737e2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9f628de-409d-496a-a91c-5dec475737e2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6b6c4457-e321-4aae-b4b2-ad57e3e15526\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b6c4457-e321-4aae-b4b2-ad57e3e15526')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6b6c4457-e321-4aae-b4b2-ad57e3e15526 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_6ffc9143-94f9-455d-8468-36738f7a282e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('top10')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6ffc9143-94f9-455d-8468-36738f7a282e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('top10');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top10",
              "summary": "{\n  \"name\": \"top10\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Ranking\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"09Taken in Plain Sight\",\n          \"02The Perfect Neighbor\",\n          \"06Vacation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Views\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9023481,\n        \"min\": 2800000,\n        \"max\": 30100000,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2900000,\n          16700000,\n          4300000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Runtime\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"1:39\",\n          \"1:30\",\n          \"1:35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hours Viewed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14498658,\n        \"min\": 4200000,\n        \"max\": 47700000,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          4200000,\n          27500000,\n          7100000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "top10.rename(columns={top10.columns[1]: \"Title\" }, inplace = True)\n",
        "top10"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DA0DaIJEHFmK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CyxHw_3V2GTV"
      },
      "source": [
        "And there we have it; a nicely formatted dataframe ready for analysis, straight from a website.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "th0OmCMq2GTW"
      },
      "source": [
        "# Assessed Question\n",
        "\n",
        "using this URL, `https://en.wikipedia.org/wiki/List_of_countries_by_traffic-related_death_rate`, calculate the average road fatalities per 100,000 inhabitants in Asia in 2019. Your answer should utilize the pandas `read_html` and `groupby` functions."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import requests\n",
        "from io import StringIO\n",
        "\n",
        "# I tried to directly fetch the HTML but it kept saying error 403 Forbidden.\n",
        "# Then I tried to upload the table from Wikipedia on a csv file but it meant that I wouldnt be using the URL\n",
        "# So Finally, I resolved this issue by prending to be a browser (because Wikipedia like many websites blocks bots)\n",
        "\n",
        "url = \"https://en.wikipedia.org/wiki/List_of_countries_by_traffic-related_death_rate\"\n",
        "headers = {\"User-Agent\": \"Mozilla/5.0\"}\n",
        "response = requests.get(url, headers=headers)\n",
        "\n",
        "tables = pd.read_html(StringIO(response.text))\n",
        "df = tables[0]   # first table is the right one\n",
        "\n",
        "# We rename the colums so that it is not confusing\n",
        "df.columns = [\"Country/region\", \"Continent\", \"Per_100k\", \"Per_1bn_vehicle_km\", \"Total\", \"Date\"]\n",
        "\n",
        "# Then we have to clean the data\n",
        "df[\"Per_100k\"] = pd.to_numeric(df[\"Per_100k\"], errors=\"coerce\")\n",
        "df[\"Date\"] = pd.to_numeric(df[\"Date\"], errors=\"coerce\")\n",
        "\n",
        "# Finally the question asks us to calculate for Asia and specifically the year 2019 so we filter the data\n",
        "asia_2019 = df[(df[\"Continent\"] == \"Asia\") & (df[\"Date\"] == 2019)]\n",
        "\n",
        "# Calculate the average\n",
        "average = asia_2019[\"Per_100k\"].mean()\n",
        "\n",
        "print(\"Average road fatalities per 100,000 inhabitants in Asia (2019):\", round(average, 2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fkS0K8I3ejXy",
        "outputId": "d3147f0a-2372-4151-a80b-05196c4fcde1"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average road fatalities per 100,000 inhabitants in Asia (2019): 15.68\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cJgAEiplUfOL"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "W2. Working with Data in Pandas.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3.9.7 ('geo')",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "vscode": {
      "interpreter": {
        "hash": "8ee0682e3aec3eb14c273afe4405335ee3a64a018407db16d950813fa3a05036"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}